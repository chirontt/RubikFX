plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'  //requires JDK11+
    id 'com.gluonhq.gluonfx-gradle-plugin' version '1.0.13'  //requires GraalVM 22.0+
    id 'org.beryx.jlink' version '2.25.0'
}

tasks.wrapper {
    gradleVersion = '7.4.2'
    distributionType = Wrapper.DistributionType.ALL
}

group = 'com.jpl.games'
version = '1.0.0-SNAPSHOT'

ext {
    mainClassName = 'com.jpl.games.RubikFX'
    mainModuleName = 'rubikfx'
    launcherClassName = 'com.jpl.games.Launcher'
    javafxVersion = '18.0.1'  //requires JDK11+
    currentPlatform = javafx.platform.classifier
}

repositories {
    mavenCentral()
    mavenLocal()
}

compileJava {
    options.release = 11  //use JDK11+ for compiling & running
    options.encoding = 'UTF-8'
}

javafx {
    version = javafxVersion
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.swing']
}

configurations {
    //define a configuration for other supported OS native libraries (apart from the current OS)
    otherOSnatives
}

dependencies {
    implementation('org.fxyz3d:fxyz3d-importers:0.5.4') {
        exclude group: 'org.openjfx', module: '*'
    }

    ['linux', 'mac', 'win'].each { classifier ->
        if (classifier != currentPlatform) {
            otherOSnatives "org.openjfx:javafx-base:$javafxVersion:$classifier"
            otherOSnatives "org.openjfx:javafx-controls:$javafxVersion:$classifier"
            otherOSnatives "org.openjfx:javafx-fxml:$javafxVersion:$classifier"
            otherOSnatives "org.openjfx:javafx-graphics:$javafxVersion:$classifier"
            otherOSnatives "org.openjfx:javafx-swing:$javafxVersion:$classifier"
        }
    }
}

sourceSets {
    main {
        resources {
            //include the GraalVM native-image configuration files
            srcDir "src/graal-cfg/$currentPlatform"
        }
    }
}

jar {
    manifest {
        attributes(
            'Main-Class': project.mainClassName,
            'JavaFX-Version': javafxVersion,
            'Built-By': System.getProperty('user.name'),
            'Created-By': System.getProperty('java.runtime.version') + ' (' + System.getProperty('java.vendor') + ')',
            'Gradle-Version': 'Gradle ' + gradle.getGradleVersion(),
        )
    }
}

application {
    mainClass = project.mainClassName
    mainModule = project.mainModuleName
    executableDir = ''
}

//main distribution generated would be platform-specific to the current OS
//hence the distribution's name should reflect that
distributions.main.distributionBaseName = project.name + '-' + currentPlatform

run {
    //use the following jvmArgs for as many different run scenarios as possible,
    //and for all the code-execution paths as much as possible,
    //to generate (or merge with) the GraalVM native-image configuration files
    //in the src/graal-cfg/<currentPlatform>/META-INF/native-image directory.
    //This directory is used by GraalVM during the native-image build.

    //jvmArgs = ["-agentlib:native-image-agent=config-merge-dir=src/graal-cfg/$currentPlatform/META-INF/native-image"]

    debugOptions {
        enabled = false
        port = 5566
        server = true
        suspend = false
    }

}

//make an executable uber jar including all dependencies
//which should work in all supported OS'es (Windows, Mac and Linux)
task uberJar(type: Jar) {
    with jar
    archiveClassifier = 'no-deps'
    manifest {
        attributes(
            'Main-Class': project.launcherClassName,
            'JavaFX-Version': javafxVersion,
            'Built-By': System.getProperty('user.name'),
            'Created-By': System.getProperty('java.runtime.version') + ' (' + System.getProperty('java.vendor') + ')',
            'Gradle-Version': 'Gradle ' + gradle.getGradleVersion(),
        )
    }
    from {
        def allClasspaths = configurations.runtimeClasspath + configurations.otherOSnatives
        allClasspaths.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy 'exclude'
}

gluonfx {
    compilerArgs = [
        '-H:+TraceNativeToolUsage',
    ]
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = project.mainModuleName
    }
}

